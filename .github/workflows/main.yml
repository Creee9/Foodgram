name: Main Foodgram Workflow

on:
  push:
    branches:
      - master

jobs:

  tests:
    name: PEP8 check
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r backend/requirements.txt
    - name: Test with flake8
      run: python -m flake8 backend/

  build_and_push_to_docker_hub:
    name: Push backend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_backend:latest 
          
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "foodgram"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd foodgram
          sudo docker compose -f docker-compose.production.yml pull

          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d

          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/ 
  # deploy:
  #     name: Deploying on server
  #     if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
  #     runs-on: ubuntu-latest
  #     needs: build_and_push_to_docker_hub
  #     steps:
  #       - name: pull docker image
  #         uses: appleboy/ssh-action@master
  #         with:
  #           host: ${{ secrets.HOST }}
  #           username: ${{ secrets.USER }}
  #           key: ${{ secrets.SSH_KEY }}
  #           passphrase: ${{ secrets.PASSPHRASE }}
  #           script: |
  #             sudo docker-compose stop
  #             sudo docker-compose rm backend
  #             sudo docker-compose rm frontend
  #             sudo rm -f .env
  #             sudo touch .env
  #             sudo chmod 666 .env
  #             sudo echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
  #             sudo echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #             sudo echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #             sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #             sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #             sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #             sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  #             sudo echo DEBUG=${{ secrets.DEBUG }} >> .env
  #             sudo echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
  #             sudo docker-compose up -d --build
            
  #       - name: Send message if deploy failed
  #         if: ${{ failure() }}
  #         uses: appleboy/telegram-action@master
  #         with:
  #           to: ${{ secrets.TELEGRAM_TO }}
  #           token: ${{ secrets.TELEGRAM_TOKEN }}
  #           message: |
  #             Ошибка при деплое  - ${{ github.repository }}
  #             https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
  # send_message:
  #   name: Send success message
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #   - name: send message
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
